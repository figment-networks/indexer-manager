// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/figment-networks/cosmos-indexer/manager/client (interfaces: TaskSender)

// Package mocks is a generated GoMock package.
package mocks

import (
	structs "github.com/figment-networks/cosmos-indexer/manager/connectivity/structs"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockTaskSender is a mock of TaskSender interface
type MockTaskSender struct {
	ctrl     *gomock.Controller
	recorder *MockTaskSenderMockRecorder
}

// MockTaskSenderMockRecorder is the mock recorder for MockTaskSender
type MockTaskSenderMockRecorder struct {
	mock *MockTaskSender
}

// NewMockTaskSender creates a new mock instance
func NewMockTaskSender(ctrl *gomock.Controller) *MockTaskSender {
	mock := &MockTaskSender{ctrl: ctrl}
	mock.recorder = &MockTaskSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTaskSender) EXPECT() *MockTaskSenderMockRecorder {
	return m.recorder
}

// Send mocks base method
func (m *MockTaskSender) Send(arg0 []structs.TaskRequest) (*structs.Await, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(*structs.Await)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Send indicates an expected call of Send
func (mr *MockTaskSenderMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockTaskSender)(nil).Send), arg0)
}
